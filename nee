import React, { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import OpenAI from "openai";
import Dropdown from './Dropdown'; 
import '../styles/GptArena.css';
import button from '../assets/button.svg';

const api_key = process.env.REACT_APP_OPENAI_API_KEY;
const openai = new OpenAI({apiKey: api_key, dangerouslyAllowBrowser: true});

const modelMapping = {
  gpt35Turbo: "gpt-3.5-turbo",
  gpt4: "gpt-4-1106-preview", 
  flanT5Base: "google/flan-t5-base" 
};

// Hugging Face API Function 
async function queryHuggingFace(prompt) { 
  const response = await fetch("https://api-inference.huggingface.co/models/google/flan-t5-base", { 
    headers: { Authorization: "Bearer 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" }, 
    method: "POST", 
    body: JSON.stringify({ "inputs": prompt }), 
  }); 
  const result = await response.json(); 
  return result; 
}

const GptArena = () => {
  const [input, setInput] = useState('');
  const [gptOutput, setGptOutput] = useState(''); 
  const [huggingFaceOutput, setHuggingFaceOutput] = useState('');
  const [selectedOption, setSelectedOption] = useState('gpt-3.5-turbo'); // Initial selection

  const handleInputChange = e => {
    setInput(e.target.value);
  }

  const handleSubmitGpt = async (modelId) => { 
    try {
      const completion = await openai.chat.completions.create({
        messages: [{ role: "user", content: input }],
        model: modelId,
        stream: true,
      });
      for await (const chunk of completion) {
        let content = chunk.choices[0]?.delta?.content;
        if (content === undefined) {
          break;
        }
        setGptOutput(prevOutput => (prevOutput || '') + content); 
      }
    } catch (error) {
      console.error("Error fetching from OpenAI:", error);
      setGptOutput("An error occurred."); 
    }
  }

  const handleSubmitHuggingFace = async () => {
    try {
      const prompt = selectedOption; 
      const response = await queryHuggingFace(prompt); 
      const generatedText = response.generated_text;  
      setHuggingFaceOutput(generatedText); 
    } catch (error) {
      console.error("Error fetching from Hugging Face model:", error);
      setHuggingFaceOutput("An error occurred."); 
    }
  }

  const handleCombinedSubmit = () => {
    setGptOutput(''); 
    setHuggingFaceOutput('');
    const modelId = modelMapping[selectedOption]; 

    if (modelId.startsWith('gpt')) { 
      handleSubmitGpt(modelId); 
    } else {
      handleSubmitHuggingFace(); 
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleCombinedSubmit();
    }
  };

  return (
    <div className='main-page'>
      <header>GPT Arena</header>
      <div className='gpt-container'>
        <Dropdown onOptionSelect={setSelectedOption} /> 
        <div className='container'> 
          <h2>GPT Output</h2> 
          <div className="markdown-content">
            <ReactMarkdown>{gptOutput}</ReactMarkdown>
          </div>
        </div>
        <div className='container'> 
          <h2>Hugging Face Output</h2> 
          <div className="markdown-content">
            <ReactMarkdown>{huggingFaceOutput}</ReactMarkdown>
          </div>
        </div>
      </div>
      <div>
        <div className='message-chat-gpt'>
          <input type='text' value={input} onChange={handleInputChange} onKeyDown={handleKeyPress} placeholder='Message ChatGPT...' />
          <img src={button} onClick={handleCombinedSubmit} className='send' alt='send'/>
        </div>
      </div>
    </div>
  )
}

export default GptArena;

